The OAuth 2.0 Authorization Framework
https://datatracker.ietf.org/doc/html/rfc6749
nonce/rfc/rfc6749-oauth20-framework.pdf

Section 4.1 Authorization Code Grant (ACG)
Handle: AuthzCodeFlow
The authorization code grant issues a temporary credential,
the authorization code, to represent the resource ownerâ€™s delegation
to the client,

- Part A. Authenticate the resource owner and obtain authorization code.
    Authenticate RO.
    Establish if RO grants or denies Client's access request.
    Grant authorization code to the Client.

    - Contract
        AS::ACG::Request::MUST
        AS::ACG::authz_code::Security::MUST.
        AS::ACG::Impl::Repr::authz_code::SHOULD.
        Client::ACG::Response::MUST.

    - Preconfigured State (Global. Well-known.)
        AS::AuthorizationEndpoint
            client has access to the authorization endpoint.
        client id
            client id registered with the authorization server.
        redirection uri
            client's redirection endpoint previously established
            during the client registration process.

    - Input
        Required 'response_type' = 'code'
        Required 'client_id'
        Optional 'scope'
        Optional 'redirect_uri'
            used by the AS to redirect the UA back to the Client
            after access is either granted or denied.
        Recommended 'state'


    - Output (4.1.2.  Authorization Response)
        If RO is authenticated and RO grants client's access request
            Required Fresh ShortLived SingleUse 'code'
                'authz_code' expires in 1 minute to 10 minutes (MAX).
                Client can use the code at most once before the code expires..
            Required Reflected 'state'

    - Effects
        AuthorizationServer AS
            Condition CodeGranted - valid request, authorization code is granted.
                let r = bind('authz_code', 'client_id', 'redirect_uri', timestamp).
                store r in PendingClientAuthN(for use in Part B).
            Condition NOT CodGranted - autorization code is NOT granted.
                let r = ('client_id', 'redirect_uri', timestamp, reason).
                store r in FailedAuthN (for use in SecurityAnalytics).
                update SecuritySubsytem.
                    referred for quotas, alerts, dashboards,...
        Redirection
            goto 'redirect_uri'
        Interaction
            ACG Request: Client -| web browser |- RO
            RO AuthN: AS -| channel |- RO
            ACG Response: AS -| web browser |- Client


- Part B. Authenticate the client and obtain tokens.
    Section 4.1.3.  Access Token Request
    Authenticate the Client.
        what mechanisms are used to authenticate the client?
        Section 2.3, 2.3.1 and 2.3.2
            HTTP Basic Authentication
            client_id and client_secret are made part of the request.
            They are embedded in the request body.
            Any other mechanism that fits the security requirements of AS.
        Section 2.4 - Unregistered Clients.
    Validate authorization code.
    Validate the redirect uri.
    Grant an access token and an optional refresh token.

    - Contract
        AS::ACG::Request::MUST
        AS::TokenEndpoint::Security::MUST
        AS::TokenEndpoint::ClientAuthN::Security::MUST
        AS::TokenEndpoint::MUSTNOT
        AS::TokenEnpoint::Request::MUST (POST Requests ONLY)
        AS::TokenEnpoint::Request::MUSTNOT
        AS::TokenEnpoint::Request::MUST
        AS::AccessToken::RedirectURI::Request::MUST
        AS::AccessToken::Expiry::SHOULD

    - Preconfigured State
        AS::TokenEndpoint
        client id
        client secret
        redirect uri

    - Input
        Required 'grant_type' = 'authorization_code'
        Required 'code' = A::Output::'authz_code'
        Conditional Required 'redirect_uri' = SOME A::Input::'redirect_uri'
        Conditional Required 'client_id' = A::Input::'client_id'

    - Output
        Section 5.1
        Access token.
        Optional Refresh token.
        REQUIRED 'access_token' = <opaque string>
        REQUIRED 'token_type' = <opaque string>
        RECOMMENDED 'expires_in' = <number of seconds>
            AS::ACG::AccessToken::Expiry::SHOULD
        OPTIONAL 'refresh_token' = <opaque string>
        CONDITIONAL scope
            OPTIONAL scope = s IF A::Input::scope = SOME s
                if 'scope' is identical to the scope requested by the client.
            REQUIRED 'scope' !=  A::Input::'scope'
            REQUIRED 'scope' if A::Input::'scope' is NONE
*****CONTRACT****
The authorization server MUST include the HTTP "Cache-Control" response header
field [RFC2616] with a value of "no-store" in any response containing tokens,
credentials, or other sensitive information, as well as the "Pragma" response
header field [RFC2616] with a value of "no-cache".
****************
    - Effects
        AuthorizationServer
            Precondition: token request is valid.
                revoke/retire the just expired tokens to revoked_token_store.
                    timestamp the retired tokens.
                update access_tken_store
                    (client id, access token, token_type, expires_in,
                        refresh token, scope, timestamp).



Implementation - Mandatory Requirements, Guidelines, and Rules.

AS::ACG::Request::MUST
AS::Client::RedirectURI::Registration::MUST
The authorization server MUST require public clients and SHOULD require
confidential clients to register their redirection URIs.
If a redirection URI is provided in the request, the authorization server MUST
validate it against the registered value.

AS::ACG::authz_code::Security::MUST
The authorization code is bound to the client identifier and redirection URI.
    The authorization code MUST be short lived.
    The authorization code MUST expire within 10 minutes.
    The authorization code MAY be used AT MOST once.
    If an authorization code is used more than once to exchange an
    authorization code for an access token, the authorization server
    MUST deny the request and SHOULD revoke (when possible) all tokens
    previously issued based on that authorization code.
    If the authorization server observes multiple attempts to exchange an
    authorization code for an access token, the authorization server
    SHOULD attempt to revoke all access tokens already granted based on
    the compromised authorization code.

Client::ACG::Response::MUST
The client MUST ignore unrecognized response parameters.

AS::ACG::Impl::Repr::authz_code::SHOULD
The authorization server SHOULD document the size of any value it issues.
Tha 'authz_code' string size is left undefined by OAUth 2.0 specification.
    The authorization server SHOULD document the size of any value it issues.
    The client should avoid making assumptions about code value sizes.

AS::Endpoint::URI::MAY
The endpoint URI MAY include an "application/x-www-form-urlencoded"
formatted query component, which MUST be retained when adding additional
query parameters.

AS::TokenEndpoint::MUSTNOT
The endpoint URI MUST NOT include a fragment component.

AS::TokenEndpoint::Security::MUST
The authorization server MUST require the use of TLS when sending requests
to the token endpoint. (Section 1.6)

AS::TokenEnpoint::Request::MUST
The client MUST use the HTTP "POST" method when making access token requests.
Parameters sent without a value MUST be treated as if they were omitted from the request.
The authorization server MUST ignore unrecognized request parameters.

AS::TokenEnpoint::Request::MUSTNOT
Request and response parameters MUST NOT be included more than once.

Client::AccessToken::Request::MUST
The client MUST use the HTTP "POST" method when making access token requests.

AS::AccessToken::RedirectURI::Request::MUST
4.1.3.  Access Token Request
The authorization server MUST Ensure that the "redirect_uri"
parameter is present if the "redirect_uri" parameter was included
in the initial authorization request as described in Section 4.1.1.
When "redirect_uri" is included ensure that their values are identical.

AS::TokenEndpoint::ClientAuthN::Security::MUST
The authorization server MUST require client authentication for
confidential clients.
    HTTP Basic Authentication.
The authorization server MUST require client authentication for
any client that was issued client credentials or with other
authentication requirements (mTLS, JWT, Web AuthN, Custom).
The authorization server MUST authenticate the client if client
authentication is included.

AS::AccessToken::Expiry::SHOULD
The authorization server MAY NOT include 'expires_in' parameter in its
response, against the actual RECOMMENDED practice of including it (section 5.1),
If omitted, the authorization server SHOULD provide the expiration time via
other means or document the default value.

AS::ClientRegistration::MUST
AS::ACG::Request::MUST
The authorization server MUST require public clients and SHOULD require
confidential clients to register their redirection URIs.
If a redirection URI is provided in the request, the authorization server MUST
validate it against the registered value.

AS::Client::AuthN::Security::MUST
If the client type is confidential or the client was issued client credentials
(or assigned other authentication requirements), the client MUST authenticate
with the  authorization server as described in Section 3.2.1.